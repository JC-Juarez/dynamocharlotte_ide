Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> maindc
Rule 1     maindc -> firstQuadruple dc_compound_program
Rule 2     firstQuadruple -> <empty>
Rule 3     dc_compound_program -> varDeclaration subprocedures mainblock
Rule 4     varDeclaration -> variables_dc varDeclaration
Rule 5     varDeclaration -> objectvariables_dc varDeclaration
Rule 6     varDeclaration -> empty
Rule 7     subprocedures -> FUNCTION seen_SubId statements_dc endProcedure RETURN subprocedures
Rule 8     subprocedures -> empty
Rule 9     seen_SubId -> ID
Rule 10    endProcedure -> <empty>
Rule 11    mainblock -> MAIN startPosition statements_dc endPosition END
Rule 12    startPosition -> <empty>
Rule 13    endPosition -> <empty>
Rule 14    statements_dc -> assign_dc statements_dc
Rule 15    statements_dc -> input_dc statements_dc
Rule 16    statements_dc -> print_dc statements_dc
Rule 17    statements_dc -> if_dc statements_dc
Rule 18    statements_dc -> while_dc statements_dc
Rule 19    statements_dc -> dowhile_dc statements_dc
Rule 20    statements_dc -> for_dc statements_dc
Rule 21    statements_dc -> call_dc statements_dc
Rule 22    statements_dc -> unitary_dc statements_dc
Rule 23    statements_dc -> binary_dc statements_dc
Rule 24    statements_dc -> resize_dc statements_dc
Rule 25    statements_dc -> add_dc statements_dc
Rule 26    statements_dc -> empty
Rule 27    variables_dc -> VAR ID AS NUMBER_KEYWORD
Rule 28    variables_dc -> VAR ID AS STRING_KEYWORD
Rule 29    objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID
Rule 30    objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID
Rule 31    objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID
Rule 32    assign_dc -> ID EQUALS generalexpression
Rule 33    assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
Rule 34    assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
Rule 35    assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
Rule 36    input_dc -> INPUT LEFTPAR ID RIGHTPAR
Rule 37    input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
Rule 38    input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
Rule 39    input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
Rule 40    print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR
Rule 41    print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR
Rule 42    printarithmetic -> printarithmetic PLUS printarithmetic
Rule 43    printarithmetic -> ID
Rule 44    printarithmetic -> NUMBER
Rule 45    printarithmetic -> STRING
Rule 46    printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 47    printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 48    printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 49    print_dc -> PRINT LEFTPAR ENDL RIGHTPAR
Rule 50    if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
Rule 51    seen_LogicResultIf -> <empty>
Rule 52    if_elsepart -> ELSE seen_Else statements_dc
Rule 53    if_elsepart -> empty
Rule 54    seen_Else -> <empty>
Rule 55    seen_IfEnd -> <empty>
Rule 56    while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
Rule 57    seen_While -> <empty>
Rule 58    seen_LogicResultWhile -> <empty>
Rule 59    seen_WhileEnd -> <empty>
Rule 60    dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
Rule 61    seen_Do -> <empty>
Rule 62    seen_LogicResultDoWhile -> <empty>
Rule 63    for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
Rule 64    seen_ID -> ID
Rule 65    seen_AE1 -> <empty>
Rule 66    seen_AE2 -> <empty>
Rule 67    seen_Next -> <empty>
Rule 68    call_dc -> CALL ID
Rule 69    unitary_dc -> ID PLUS PLUS
Rule 70    unitary_dc -> ID MINUS MINUS
Rule 71    binary_dc -> ID PLUS EQUALS arithmeticexpression
Rule 72    binary_dc -> ID MINUS EQUALS arithmeticexpression
Rule 73    binary_dc -> ID MULTIPLY EQUALS arithmeticexpression
Rule 74    binary_dc -> ID DIVIDE EQUALS arithmeticexpression
Rule 75    binary_dc -> ID MODULO EQUALS arithmeticexpression
Rule 76    resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
Rule 77    resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
Rule 78    resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
Rule 79    add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR
Rule 80    add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR
Rule 81    add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR
Rule 82    add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR
Rule 83    add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR
Rule 84    add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR
Rule 85    generalexpression -> arithmeticexpression
Rule 86    generalexpression -> STRING
Rule 87    arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression
Rule 88    arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression
Rule 89    arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression
Rule 90    arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression
Rule 91    arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression
Rule 92    arithmeticexpression -> ID
Rule 93    arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR
Rule 94    arithmeticexpression -> NUMBER
Rule 95    arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 96    arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 97    arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 98    logicresult -> logicexpression
Rule 99    logicexpression -> logicexpression AND logicexpression
Rule 100   logicexpression -> logicexpression OR logicexpression
Rule 101   logicexpression -> LEFTPAR logicexpression RIGHTPAR
Rule 102   logicexpression -> logicOption SAME logicOption
Rule 103   logicexpression -> logicOption DIFFERENT logicOption
Rule 104   logicexpression -> logicOption GREATERTHAN logicOption
Rule 105   logicexpression -> logicOption LESSTHAN logicOption
Rule 106   logicexpression -> logicOption GREATEREQUAL logicOption
Rule 107   logicexpression -> logicOption LESSEQUAL logicOption
Rule 108   logicOption -> ID
Rule 109   logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 110   logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 111   logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
Rule 112   logicOption -> NUMBER
Rule 113   logicOption -> STRING
Rule 114   logicOption -> LEFTPAR logicOption RIGHTPAR
Rule 115   empty -> <empty>

Terminals, with rules where they appear

ADD                  : 79
ADDCOL               : 81
ADDROW               : 80
ADDX                 : 82
ADDY                 : 83
ADDZ                 : 84
AND                  : 99
AS                   : 27 28
CALL                 : 68
COMMA                : 30 31 31 77 78 78
CUBE_KEYWORD         : 31
DIFFERENT            : 103
DIVIDE               : 74 90
DO                   : 60
DOT                  : 76 77 78 79 80 81 82 83 84
ELSE                 : 52
END                  : 11
ENDIF                : 50
ENDL                 : 49
EQUALS               : 32 33 34 35 63 71 72 73 74 75
FOR                  : 63
FUNCTION             : 7
GREATEREQUAL         : 106
GREATERTHAN          : 104
ID                   : 9 27 28 29 30 31 32 33 34 35 36 37 38 39 43 46 47 48 64 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 92 95 96 97 108 109 110 111
IF                   : 50
INPUT                : 36 37 38 39
LEFTBRACKET          : 33 34 34 35 35 35 37 38 38 39 39 39 46 47 47 48 48 48 95 96 96 97 97 97 109 110 110 111 111 111
LEFTPAR              : 29 30 31 36 37 38 39 40 41 49 50 56 60 76 77 78 79 80 81 82 83 84 93 101 114
LESSEQUAL            : 107
LESSTHAN             : 105
LOOPWHILE            : 60
MAIN                 : 11
MAT_KEYWORD          : 30
MINUS                : 70 70 72 88
MODULO               : 75 91
MULTIPLY             : 73 89
NEXT                 : 63
NUMBER               : 29 30 30 31 31 31 44 94 112
NUMBER_KEYWORD       : 27
OR                   : 100
PLUS                 : 42 69 69 71 87
PRINT                : 41 49
PRINTLN              : 40
RESIZE               : 76 77 78
RETURN               : 7
RIGHTBRACKET         : 33 34 34 35 35 35 37 38 38 39 39 39 46 47 47 48 48 48 95 96 96 97 97 97 109 110 110 111 111 111
RIGHTPAR             : 29 30 31 36 37 38 39 40 41 49 50 56 60 76 77 78 79 80 81 82 83 84 93 101 114
SAME                 : 102
STRING               : 45 86 113
STRING_KEYWORD       : 28
TO                   : 63
VAR                  : 27 28
VECTOR_KEYWORD       : 29
WEND                 : 56
WHILE                : 56
error                : 

Nonterminals, with rules where they appear

add_dc               : 25
arithmeticexpression : 33 34 34 35 35 35 37 38 38 39 39 39 46 47 47 48 48 48 63 63 71 72 73 74 75 76 77 77 78 78 78 85 87 87 88 88 89 89 90 90 91 91 93 95 96 96 97 97 97 109 110 110 111 111 111
assign_dc            : 14
binary_dc            : 23
call_dc              : 21
dc_compound_program  : 1
dowhile_dc           : 19
empty                : 6 8 26 53
endPosition          : 11
endProcedure         : 7
firstQuadruple       : 1
for_dc               : 20
generalexpression    : 32 33 34 35 79
if_dc                : 17
if_elsepart          : 50
input_dc             : 15
logicOption          : 102 102 103 103 104 104 105 105 106 106 107 107 114
logicexpression      : 98 99 99 100 100 101
logicresult          : 50 56 60
mainblock            : 3
maindc               : 0
objectvariables_dc   : 5
print_dc             : 16
printarithmetic      : 40 41 42 42
resize_dc            : 24
seen_AE1             : 63
seen_AE2             : 63
seen_Do              : 60
seen_Else            : 52
seen_ID              : 63
seen_IfEnd           : 50
seen_LogicResultDoWhile : 60
seen_LogicResultIf   : 50
seen_LogicResultWhile : 56
seen_Next            : 63
seen_SubId           : 7
seen_While           : 56
seen_WhileEnd        : 56
startPosition        : 11
statements_dc        : 7 11 14 15 16 17 18 19 20 21 22 23 24 25 50 52 56 60 63
subprocedures        : 3 7
unitary_dc           : 22
varDeclaration       : 3 4 5
variables_dc         : 4
while_dc             : 18

Parsing method: LALR

state 0

    (0) S' -> . maindc
    (1) maindc -> . firstQuadruple dc_compound_program
    (2) firstQuadruple -> .

    VAR             reduce using rule 2 (firstQuadruple -> .)
    VECTOR_KEYWORD  reduce using rule 2 (firstQuadruple -> .)
    MAT_KEYWORD     reduce using rule 2 (firstQuadruple -> .)
    CUBE_KEYWORD    reduce using rule 2 (firstQuadruple -> .)
    FUNCTION        reduce using rule 2 (firstQuadruple -> .)
    MAIN            reduce using rule 2 (firstQuadruple -> .)

    maindc                         shift and go to state 1
    firstQuadruple                 shift and go to state 2

state 1

    (0) S' -> maindc .



state 2

    (1) maindc -> firstQuadruple . dc_compound_program
    (3) dc_compound_program -> . varDeclaration subprocedures mainblock
    (4) varDeclaration -> . variables_dc varDeclaration
    (5) varDeclaration -> . objectvariables_dc varDeclaration
    (6) varDeclaration -> . empty
    (27) variables_dc -> . VAR ID AS NUMBER_KEYWORD
    (28) variables_dc -> . VAR ID AS STRING_KEYWORD
    (29) objectvariables_dc -> . VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID
    (30) objectvariables_dc -> . MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID
    (31) objectvariables_dc -> . CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID
    (115) empty -> .

    VAR             shift and go to state 8
    VECTOR_KEYWORD  shift and go to state 9
    MAT_KEYWORD     shift and go to state 10
    CUBE_KEYWORD    shift and go to state 11
    FUNCTION        reduce using rule 115 (empty -> .)
    MAIN            reduce using rule 115 (empty -> .)

    dc_compound_program            shift and go to state 3
    varDeclaration                 shift and go to state 4
    variables_dc                   shift and go to state 5
    objectvariables_dc             shift and go to state 6
    empty                          shift and go to state 7

state 3

    (1) maindc -> firstQuadruple dc_compound_program .

    $end            reduce using rule 1 (maindc -> firstQuadruple dc_compound_program .)


state 4

    (3) dc_compound_program -> varDeclaration . subprocedures mainblock
    (7) subprocedures -> . FUNCTION seen_SubId statements_dc endProcedure RETURN subprocedures
    (8) subprocedures -> . empty
    (115) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 115 (empty -> .)

    subprocedures                  shift and go to state 12
    empty                          shift and go to state 14

state 5

    (4) varDeclaration -> variables_dc . varDeclaration
    (4) varDeclaration -> . variables_dc varDeclaration
    (5) varDeclaration -> . objectvariables_dc varDeclaration
    (6) varDeclaration -> . empty
    (27) variables_dc -> . VAR ID AS NUMBER_KEYWORD
    (28) variables_dc -> . VAR ID AS STRING_KEYWORD
    (29) objectvariables_dc -> . VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID
    (30) objectvariables_dc -> . MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID
    (31) objectvariables_dc -> . CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID
    (115) empty -> .

    VAR             shift and go to state 8
    VECTOR_KEYWORD  shift and go to state 9
    MAT_KEYWORD     shift and go to state 10
    CUBE_KEYWORD    shift and go to state 11
    FUNCTION        reduce using rule 115 (empty -> .)
    MAIN            reduce using rule 115 (empty -> .)

    variables_dc                   shift and go to state 5
    varDeclaration                 shift and go to state 15
    objectvariables_dc             shift and go to state 6
    empty                          shift and go to state 7

state 6

    (5) varDeclaration -> objectvariables_dc . varDeclaration
    (4) varDeclaration -> . variables_dc varDeclaration
    (5) varDeclaration -> . objectvariables_dc varDeclaration
    (6) varDeclaration -> . empty
    (27) variables_dc -> . VAR ID AS NUMBER_KEYWORD
    (28) variables_dc -> . VAR ID AS STRING_KEYWORD
    (29) objectvariables_dc -> . VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID
    (30) objectvariables_dc -> . MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID
    (31) objectvariables_dc -> . CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID
    (115) empty -> .

    VAR             shift and go to state 8
    VECTOR_KEYWORD  shift and go to state 9
    MAT_KEYWORD     shift and go to state 10
    CUBE_KEYWORD    shift and go to state 11
    FUNCTION        reduce using rule 115 (empty -> .)
    MAIN            reduce using rule 115 (empty -> .)

    objectvariables_dc             shift and go to state 6
    varDeclaration                 shift and go to state 16
    variables_dc                   shift and go to state 5
    empty                          shift and go to state 7

state 7

    (6) varDeclaration -> empty .

    FUNCTION        reduce using rule 6 (varDeclaration -> empty .)
    MAIN            reduce using rule 6 (varDeclaration -> empty .)


state 8

    (27) variables_dc -> VAR . ID AS NUMBER_KEYWORD
    (28) variables_dc -> VAR . ID AS STRING_KEYWORD

    ID              shift and go to state 17


state 9

    (29) objectvariables_dc -> VECTOR_KEYWORD . LEFTPAR NUMBER RIGHTPAR ID

    LEFTPAR         shift and go to state 18


state 10

    (30) objectvariables_dc -> MAT_KEYWORD . LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID

    LEFTPAR         shift and go to state 19


state 11

    (31) objectvariables_dc -> CUBE_KEYWORD . LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID

    LEFTPAR         shift and go to state 20


state 12

    (3) dc_compound_program -> varDeclaration subprocedures . mainblock
    (11) mainblock -> . MAIN startPosition statements_dc endPosition END

    MAIN            shift and go to state 22

    mainblock                      shift and go to state 21

state 13

    (7) subprocedures -> FUNCTION . seen_SubId statements_dc endProcedure RETURN subprocedures
    (9) seen_SubId -> . ID

    ID              shift and go to state 24

    seen_SubId                     shift and go to state 23

state 14

    (8) subprocedures -> empty .

    MAIN            reduce using rule 8 (subprocedures -> empty .)


state 15

    (4) varDeclaration -> variables_dc varDeclaration .

    FUNCTION        reduce using rule 4 (varDeclaration -> variables_dc varDeclaration .)
    MAIN            reduce using rule 4 (varDeclaration -> variables_dc varDeclaration .)


state 16

    (5) varDeclaration -> objectvariables_dc varDeclaration .

    FUNCTION        reduce using rule 5 (varDeclaration -> objectvariables_dc varDeclaration .)
    MAIN            reduce using rule 5 (varDeclaration -> objectvariables_dc varDeclaration .)


state 17

    (27) variables_dc -> VAR ID . AS NUMBER_KEYWORD
    (28) variables_dc -> VAR ID . AS STRING_KEYWORD

    AS              shift and go to state 25


state 18

    (29) objectvariables_dc -> VECTOR_KEYWORD LEFTPAR . NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 26


state 19

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR . NUMBER COMMA NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 27


state 20

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR . NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 28


state 21

    (3) dc_compound_program -> varDeclaration subprocedures mainblock .

    $end            reduce using rule 3 (dc_compound_program -> varDeclaration subprocedures mainblock .)


state 22

    (11) mainblock -> MAIN . startPosition statements_dc endPosition END
    (12) startPosition -> .

    ID              reduce using rule 12 (startPosition -> .)
    INPUT           reduce using rule 12 (startPosition -> .)
    PRINTLN         reduce using rule 12 (startPosition -> .)
    PRINT           reduce using rule 12 (startPosition -> .)
    IF              reduce using rule 12 (startPosition -> .)
    WHILE           reduce using rule 12 (startPosition -> .)
    DO              reduce using rule 12 (startPosition -> .)
    FOR             reduce using rule 12 (startPosition -> .)
    CALL            reduce using rule 12 (startPosition -> .)
    END             reduce using rule 12 (startPosition -> .)

    startPosition                  shift and go to state 29

state 23

    (7) subprocedures -> FUNCTION seen_SubId . statements_dc endProcedure RETURN subprocedures
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 30
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 24

    (9) seen_SubId -> ID .

    ID              reduce using rule 9 (seen_SubId -> ID .)
    INPUT           reduce using rule 9 (seen_SubId -> ID .)
    PRINTLN         reduce using rule 9 (seen_SubId -> ID .)
    PRINT           reduce using rule 9 (seen_SubId -> ID .)
    IF              reduce using rule 9 (seen_SubId -> ID .)
    WHILE           reduce using rule 9 (seen_SubId -> ID .)
    DO              reduce using rule 9 (seen_SubId -> ID .)
    FOR             reduce using rule 9 (seen_SubId -> ID .)
    CALL            reduce using rule 9 (seen_SubId -> ID .)
    RETURN          reduce using rule 9 (seen_SubId -> ID .)


state 25

    (27) variables_dc -> VAR ID AS . NUMBER_KEYWORD
    (28) variables_dc -> VAR ID AS . STRING_KEYWORD

    NUMBER_KEYWORD  shift and go to state 53
    STRING_KEYWORD  shift and go to state 54


state 26

    (29) objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER . RIGHTPAR ID

    RIGHTPAR        shift and go to state 55


state 27

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER . COMMA NUMBER RIGHTPAR ID

    COMMA           shift and go to state 56


state 28

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER . COMMA NUMBER COMMA NUMBER RIGHTPAR ID

    COMMA           shift and go to state 57


state 29

    (11) mainblock -> MAIN startPosition . statements_dc endPosition END
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    END             reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 58
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 30

    (7) subprocedures -> FUNCTION seen_SubId statements_dc . endProcedure RETURN subprocedures
    (10) endProcedure -> .

    RETURN          reduce using rule 10 (endProcedure -> .)

    endProcedure                   shift and go to state 59

state 31

    (14) statements_dc -> assign_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    assign_dc                      shift and go to state 31
    statements_dc                  shift and go to state 60
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 32

    (15) statements_dc -> input_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    input_dc                       shift and go to state 32
    statements_dc                  shift and go to state 61
    assign_dc                      shift and go to state 31
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 33

    (16) statements_dc -> print_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    print_dc                       shift and go to state 33
    statements_dc                  shift and go to state 62
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 34

    (17) statements_dc -> if_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    if_dc                          shift and go to state 34
    statements_dc                  shift and go to state 63
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 35

    (18) statements_dc -> while_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    while_dc                       shift and go to state 35
    statements_dc                  shift and go to state 64
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 36

    (19) statements_dc -> dowhile_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    dowhile_dc                     shift and go to state 36
    statements_dc                  shift and go to state 65
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 37

    (20) statements_dc -> for_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    for_dc                         shift and go to state 37
    statements_dc                  shift and go to state 66
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 38

    (21) statements_dc -> call_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    call_dc                        shift and go to state 38
    statements_dc                  shift and go to state 67
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 39

    (22) statements_dc -> unitary_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    unitary_dc                     shift and go to state 39
    statements_dc                  shift and go to state 68
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 40

    (23) statements_dc -> binary_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    binary_dc                      shift and go to state 40
    statements_dc                  shift and go to state 69
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 41

    (24) statements_dc -> resize_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    resize_dc                      shift and go to state 41
    statements_dc                  shift and go to state 70
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 42

    (25) statements_dc -> add_dc . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    RETURN          reduce using rule 115 (empty -> .)
    END             reduce using rule 115 (empty -> .)
    LOOPWHILE       reduce using rule 115 (empty -> .)
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)
    WEND            reduce using rule 115 (empty -> .)
    NEXT            reduce using rule 115 (empty -> .)

    add_dc                         shift and go to state 42
    statements_dc                  shift and go to state 71
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    empty                          shift and go to state 43

state 43

    (26) statements_dc -> empty .

    RETURN          reduce using rule 26 (statements_dc -> empty .)
    END             reduce using rule 26 (statements_dc -> empty .)
    LOOPWHILE       reduce using rule 26 (statements_dc -> empty .)
    ELSE            reduce using rule 26 (statements_dc -> empty .)
    ENDIF           reduce using rule 26 (statements_dc -> empty .)
    WEND            reduce using rule 26 (statements_dc -> empty .)
    NEXT            reduce using rule 26 (statements_dc -> empty .)


state 44

    (32) assign_dc -> ID . EQUALS generalexpression
    (33) assign_dc -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (69) unitary_dc -> ID . PLUS PLUS
    (70) unitary_dc -> ID . MINUS MINUS
    (71) binary_dc -> ID . PLUS EQUALS arithmeticexpression
    (72) binary_dc -> ID . MINUS EQUALS arithmeticexpression
    (73) binary_dc -> ID . MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> ID . DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> ID . MODULO EQUALS arithmeticexpression
    (76) resize_dc -> ID . DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> ID . DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID . DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> ID . DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> ID . DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> ID . DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> ID . DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> ID . DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> ID . DOT ADDZ LEFTPAR RIGHTPAR

    EQUALS          shift and go to state 72
    LEFTBRACKET     shift and go to state 73
    PLUS            shift and go to state 74
    MINUS           shift and go to state 75
    MULTIPLY        shift and go to state 76
    DIVIDE          shift and go to state 77
    MODULO          shift and go to state 78
    DOT             shift and go to state 79


state 45

    (36) input_dc -> INPUT . LEFTPAR ID RIGHTPAR
    (37) input_dc -> INPUT . LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> INPUT . LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT . LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR

    LEFTPAR         shift and go to state 80


state 46

    (40) print_dc -> PRINTLN . LEFTPAR printarithmetic RIGHTPAR

    LEFTPAR         shift and go to state 81


state 47

    (41) print_dc -> PRINT . LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> PRINT . LEFTPAR ENDL RIGHTPAR

    LEFTPAR         shift and go to state 82


state 48

    (50) if_dc -> IF . LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF

    LEFTPAR         shift and go to state 83


state 49

    (56) while_dc -> WHILE . seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (57) seen_While -> .

    LEFTPAR         reduce using rule 57 (seen_While -> .)

    seen_While                     shift and go to state 84

state 50

    (60) dowhile_dc -> DO . seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (61) seen_Do -> .

    ID              reduce using rule 61 (seen_Do -> .)
    INPUT           reduce using rule 61 (seen_Do -> .)
    PRINTLN         reduce using rule 61 (seen_Do -> .)
    PRINT           reduce using rule 61 (seen_Do -> .)
    IF              reduce using rule 61 (seen_Do -> .)
    WHILE           reduce using rule 61 (seen_Do -> .)
    DO              reduce using rule 61 (seen_Do -> .)
    FOR             reduce using rule 61 (seen_Do -> .)
    CALL            reduce using rule 61 (seen_Do -> .)
    LOOPWHILE       reduce using rule 61 (seen_Do -> .)

    seen_Do                        shift and go to state 85

state 51

    (63) for_dc -> FOR . seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (64) seen_ID -> . ID

    ID              shift and go to state 87

    seen_ID                        shift and go to state 86

state 52

    (68) call_dc -> CALL . ID

    ID              shift and go to state 88


state 53

    (27) variables_dc -> VAR ID AS NUMBER_KEYWORD .

    VAR             reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)
    VECTOR_KEYWORD  reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)
    MAT_KEYWORD     reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)
    CUBE_KEYWORD    reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)
    FUNCTION        reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)
    MAIN            reduce using rule 27 (variables_dc -> VAR ID AS NUMBER_KEYWORD .)


state 54

    (28) variables_dc -> VAR ID AS STRING_KEYWORD .

    VAR             reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)
    VECTOR_KEYWORD  reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)
    MAT_KEYWORD     reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)
    CUBE_KEYWORD    reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)
    FUNCTION        reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)
    MAIN            reduce using rule 28 (variables_dc -> VAR ID AS STRING_KEYWORD .)


state 55

    (29) objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR . ID

    ID              shift and go to state 89


state 56

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA . NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 90


state 57

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA . NUMBER COMMA NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 91


state 58

    (11) mainblock -> MAIN startPosition statements_dc . endPosition END
    (13) endPosition -> .

    END             reduce using rule 13 (endPosition -> .)

    endPosition                    shift and go to state 92

state 59

    (7) subprocedures -> FUNCTION seen_SubId statements_dc endProcedure . RETURN subprocedures

    RETURN          shift and go to state 93


state 60

    (14) statements_dc -> assign_dc statements_dc .

    RETURN          reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    END             reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    LOOPWHILE       reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    ELSE            reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    ENDIF           reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    WEND            reduce using rule 14 (statements_dc -> assign_dc statements_dc .)
    NEXT            reduce using rule 14 (statements_dc -> assign_dc statements_dc .)


state 61

    (15) statements_dc -> input_dc statements_dc .

    RETURN          reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    END             reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    LOOPWHILE       reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    ELSE            reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    ENDIF           reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    WEND            reduce using rule 15 (statements_dc -> input_dc statements_dc .)
    NEXT            reduce using rule 15 (statements_dc -> input_dc statements_dc .)


state 62

    (16) statements_dc -> print_dc statements_dc .

    RETURN          reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    END             reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    LOOPWHILE       reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    ELSE            reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    ENDIF           reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    WEND            reduce using rule 16 (statements_dc -> print_dc statements_dc .)
    NEXT            reduce using rule 16 (statements_dc -> print_dc statements_dc .)


state 63

    (17) statements_dc -> if_dc statements_dc .

    RETURN          reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    END             reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    LOOPWHILE       reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    ELSE            reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    ENDIF           reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    WEND            reduce using rule 17 (statements_dc -> if_dc statements_dc .)
    NEXT            reduce using rule 17 (statements_dc -> if_dc statements_dc .)


state 64

    (18) statements_dc -> while_dc statements_dc .

    RETURN          reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    END             reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    LOOPWHILE       reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    ELSE            reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    ENDIF           reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    WEND            reduce using rule 18 (statements_dc -> while_dc statements_dc .)
    NEXT            reduce using rule 18 (statements_dc -> while_dc statements_dc .)


state 65

    (19) statements_dc -> dowhile_dc statements_dc .

    RETURN          reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    END             reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    LOOPWHILE       reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    ELSE            reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    ENDIF           reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    WEND            reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)
    NEXT            reduce using rule 19 (statements_dc -> dowhile_dc statements_dc .)


state 66

    (20) statements_dc -> for_dc statements_dc .

    RETURN          reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    END             reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    LOOPWHILE       reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    ELSE            reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    ENDIF           reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    WEND            reduce using rule 20 (statements_dc -> for_dc statements_dc .)
    NEXT            reduce using rule 20 (statements_dc -> for_dc statements_dc .)


state 67

    (21) statements_dc -> call_dc statements_dc .

    RETURN          reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    END             reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    LOOPWHILE       reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    ELSE            reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    ENDIF           reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    WEND            reduce using rule 21 (statements_dc -> call_dc statements_dc .)
    NEXT            reduce using rule 21 (statements_dc -> call_dc statements_dc .)


state 68

    (22) statements_dc -> unitary_dc statements_dc .

    RETURN          reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    END             reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    LOOPWHILE       reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    ELSE            reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    ENDIF           reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    WEND            reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)
    NEXT            reduce using rule 22 (statements_dc -> unitary_dc statements_dc .)


state 69

    (23) statements_dc -> binary_dc statements_dc .

    RETURN          reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    END             reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    LOOPWHILE       reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    ELSE            reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    ENDIF           reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    WEND            reduce using rule 23 (statements_dc -> binary_dc statements_dc .)
    NEXT            reduce using rule 23 (statements_dc -> binary_dc statements_dc .)


state 70

    (24) statements_dc -> resize_dc statements_dc .

    RETURN          reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    END             reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    LOOPWHILE       reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    ELSE            reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    ENDIF           reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    WEND            reduce using rule 24 (statements_dc -> resize_dc statements_dc .)
    NEXT            reduce using rule 24 (statements_dc -> resize_dc statements_dc .)


state 71

    (25) statements_dc -> add_dc statements_dc .

    RETURN          reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    END             reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    LOOPWHILE       reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    ELSE            reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    ENDIF           reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    WEND            reduce using rule 25 (statements_dc -> add_dc statements_dc .)
    NEXT            reduce using rule 25 (statements_dc -> add_dc statements_dc .)


state 72

    (32) assign_dc -> ID EQUALS . generalexpression
    (85) generalexpression -> . arithmeticexpression
    (86) generalexpression -> . STRING
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    STRING          shift and go to state 97
    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    generalexpression              shift and go to state 95
    arithmeticexpression           shift and go to state 96

state 73

    (33) assign_dc -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 100

state 74

    (69) unitary_dc -> ID PLUS . PLUS
    (71) binary_dc -> ID PLUS . EQUALS arithmeticexpression

    PLUS            shift and go to state 101
    EQUALS          shift and go to state 102


state 75

    (70) unitary_dc -> ID MINUS . MINUS
    (72) binary_dc -> ID MINUS . EQUALS arithmeticexpression

    MINUS           shift and go to state 103
    EQUALS          shift and go to state 104


state 76

    (73) binary_dc -> ID MULTIPLY . EQUALS arithmeticexpression

    EQUALS          shift and go to state 105


state 77

    (74) binary_dc -> ID DIVIDE . EQUALS arithmeticexpression

    EQUALS          shift and go to state 106


state 78

    (75) binary_dc -> ID MODULO . EQUALS arithmeticexpression

    EQUALS          shift and go to state 107


state 79

    (76) resize_dc -> ID DOT . RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> ID DOT . RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID DOT . RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> ID DOT . ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> ID DOT . ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> ID DOT . ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> ID DOT . ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> ID DOT . ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> ID DOT . ADDZ LEFTPAR RIGHTPAR

    RESIZE          shift and go to state 108
    ADD             shift and go to state 109
    ADDROW          shift and go to state 110
    ADDCOL          shift and go to state 111
    ADDX            shift and go to state 112
    ADDY            shift and go to state 113
    ADDZ            shift and go to state 114


state 80

    (36) input_dc -> INPUT LEFTPAR . ID RIGHTPAR
    (37) input_dc -> INPUT LEFTPAR . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> INPUT LEFTPAR . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR

    ID              shift and go to state 115


state 81

    (40) print_dc -> PRINTLN LEFTPAR . printarithmetic RIGHTPAR
    (42) printarithmetic -> . printarithmetic PLUS printarithmetic
    (43) printarithmetic -> . ID
    (44) printarithmetic -> . NUMBER
    (45) printarithmetic -> . STRING
    (46) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (47) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 117
    NUMBER          shift and go to state 118
    STRING          shift and go to state 119

    printarithmetic                shift and go to state 116

state 82

    (41) print_dc -> PRINT LEFTPAR . printarithmetic RIGHTPAR
    (49) print_dc -> PRINT LEFTPAR . ENDL RIGHTPAR
    (42) printarithmetic -> . printarithmetic PLUS printarithmetic
    (43) printarithmetic -> . ID
    (44) printarithmetic -> . NUMBER
    (45) printarithmetic -> . STRING
    (46) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (47) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ENDL            shift and go to state 121
    ID              shift and go to state 117
    NUMBER          shift and go to state 118
    STRING          shift and go to state 119

    printarithmetic                shift and go to state 120

state 83

    (50) if_dc -> IF LEFTPAR . logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (98) logicresult -> . logicexpression
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicresult                    shift and go to state 123
    logicexpression                shift and go to state 124
    logicOption                    shift and go to state 125

state 84

    (56) while_dc -> WHILE seen_While . LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND

    LEFTPAR         shift and go to state 129


state 85

    (60) dowhile_dc -> DO seen_Do . statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    LOOPWHILE       reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 130
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 86

    (63) for_dc -> FOR seen_ID . EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT

    EQUALS          shift and go to state 131


state 87

    (64) seen_ID -> ID .

    EQUALS          reduce using rule 64 (seen_ID -> ID .)


state 88

    (68) call_dc -> CALL ID .

    ID              reduce using rule 68 (call_dc -> CALL ID .)
    INPUT           reduce using rule 68 (call_dc -> CALL ID .)
    PRINTLN         reduce using rule 68 (call_dc -> CALL ID .)
    PRINT           reduce using rule 68 (call_dc -> CALL ID .)
    IF              reduce using rule 68 (call_dc -> CALL ID .)
    WHILE           reduce using rule 68 (call_dc -> CALL ID .)
    DO              reduce using rule 68 (call_dc -> CALL ID .)
    FOR             reduce using rule 68 (call_dc -> CALL ID .)
    CALL            reduce using rule 68 (call_dc -> CALL ID .)
    RETURN          reduce using rule 68 (call_dc -> CALL ID .)
    END             reduce using rule 68 (call_dc -> CALL ID .)
    LOOPWHILE       reduce using rule 68 (call_dc -> CALL ID .)
    ELSE            reduce using rule 68 (call_dc -> CALL ID .)
    ENDIF           reduce using rule 68 (call_dc -> CALL ID .)
    WEND            reduce using rule 68 (call_dc -> CALL ID .)
    NEXT            reduce using rule 68 (call_dc -> CALL ID .)


state 89

    (29) objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .

    VAR             reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)
    VECTOR_KEYWORD  reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)
    MAT_KEYWORD     reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)
    CUBE_KEYWORD    reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)
    FUNCTION        reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)
    MAIN            reduce using rule 29 (objectvariables_dc -> VECTOR_KEYWORD LEFTPAR NUMBER RIGHTPAR ID .)


state 90

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER . RIGHTPAR ID

    RIGHTPAR        shift and go to state 132


state 91

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER . COMMA NUMBER RIGHTPAR ID

    COMMA           shift and go to state 133


state 92

    (11) mainblock -> MAIN startPosition statements_dc endPosition . END

    END             shift and go to state 134


state 93

    (7) subprocedures -> FUNCTION seen_SubId statements_dc endProcedure RETURN . subprocedures
    (7) subprocedures -> . FUNCTION seen_SubId statements_dc endProcedure RETURN subprocedures
    (8) subprocedures -> . empty
    (115) empty -> .

    FUNCTION        shift and go to state 13
    MAIN            reduce using rule 115 (empty -> .)

    subprocedures                  shift and go to state 135
    empty                          shift and go to state 14

state 94

    (92) arithmeticexpression -> ID .
    (95) arithmeticexpression -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    PLUS            reduce using rule 92 (arithmeticexpression -> ID .)
    MINUS           reduce using rule 92 (arithmeticexpression -> ID .)
    MULTIPLY        reduce using rule 92 (arithmeticexpression -> ID .)
    DIVIDE          reduce using rule 92 (arithmeticexpression -> ID .)
    MODULO          reduce using rule 92 (arithmeticexpression -> ID .)
    ID              reduce using rule 92 (arithmeticexpression -> ID .)
    INPUT           reduce using rule 92 (arithmeticexpression -> ID .)
    PRINTLN         reduce using rule 92 (arithmeticexpression -> ID .)
    PRINT           reduce using rule 92 (arithmeticexpression -> ID .)
    IF              reduce using rule 92 (arithmeticexpression -> ID .)
    WHILE           reduce using rule 92 (arithmeticexpression -> ID .)
    DO              reduce using rule 92 (arithmeticexpression -> ID .)
    FOR             reduce using rule 92 (arithmeticexpression -> ID .)
    CALL            reduce using rule 92 (arithmeticexpression -> ID .)
    RETURN          reduce using rule 92 (arithmeticexpression -> ID .)
    END             reduce using rule 92 (arithmeticexpression -> ID .)
    LOOPWHILE       reduce using rule 92 (arithmeticexpression -> ID .)
    ELSE            reduce using rule 92 (arithmeticexpression -> ID .)
    ENDIF           reduce using rule 92 (arithmeticexpression -> ID .)
    WEND            reduce using rule 92 (arithmeticexpression -> ID .)
    NEXT            reduce using rule 92 (arithmeticexpression -> ID .)
    RIGHTBRACKET    reduce using rule 92 (arithmeticexpression -> ID .)
    RIGHTPAR        reduce using rule 92 (arithmeticexpression -> ID .)
    TO              reduce using rule 92 (arithmeticexpression -> ID .)
    COMMA           reduce using rule 92 (arithmeticexpression -> ID .)
    LEFTBRACKET     shift and go to state 136


state 95

    (32) assign_dc -> ID EQUALS generalexpression .

    ID              reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    INPUT           reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    PRINTLN         reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    PRINT           reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    IF              reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    WHILE           reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    DO              reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    FOR             reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    CALL            reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    RETURN          reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    END             reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    LOOPWHILE       reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    ELSE            reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    ENDIF           reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    WEND            reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)
    NEXT            reduce using rule 32 (assign_dc -> ID EQUALS generalexpression .)


state 96

    (85) generalexpression -> arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 85 (generalexpression -> arithmeticexpression .)
    INPUT           reduce using rule 85 (generalexpression -> arithmeticexpression .)
    PRINTLN         reduce using rule 85 (generalexpression -> arithmeticexpression .)
    PRINT           reduce using rule 85 (generalexpression -> arithmeticexpression .)
    IF              reduce using rule 85 (generalexpression -> arithmeticexpression .)
    WHILE           reduce using rule 85 (generalexpression -> arithmeticexpression .)
    DO              reduce using rule 85 (generalexpression -> arithmeticexpression .)
    FOR             reduce using rule 85 (generalexpression -> arithmeticexpression .)
    CALL            reduce using rule 85 (generalexpression -> arithmeticexpression .)
    RETURN          reduce using rule 85 (generalexpression -> arithmeticexpression .)
    END             reduce using rule 85 (generalexpression -> arithmeticexpression .)
    LOOPWHILE       reduce using rule 85 (generalexpression -> arithmeticexpression .)
    ELSE            reduce using rule 85 (generalexpression -> arithmeticexpression .)
    ENDIF           reduce using rule 85 (generalexpression -> arithmeticexpression .)
    WEND            reduce using rule 85 (generalexpression -> arithmeticexpression .)
    NEXT            reduce using rule 85 (generalexpression -> arithmeticexpression .)
    RIGHTPAR        reduce using rule 85 (generalexpression -> arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 97

    (86) generalexpression -> STRING .

    ID              reduce using rule 86 (generalexpression -> STRING .)
    INPUT           reduce using rule 86 (generalexpression -> STRING .)
    PRINTLN         reduce using rule 86 (generalexpression -> STRING .)
    PRINT           reduce using rule 86 (generalexpression -> STRING .)
    IF              reduce using rule 86 (generalexpression -> STRING .)
    WHILE           reduce using rule 86 (generalexpression -> STRING .)
    DO              reduce using rule 86 (generalexpression -> STRING .)
    FOR             reduce using rule 86 (generalexpression -> STRING .)
    CALL            reduce using rule 86 (generalexpression -> STRING .)
    RETURN          reduce using rule 86 (generalexpression -> STRING .)
    END             reduce using rule 86 (generalexpression -> STRING .)
    LOOPWHILE       reduce using rule 86 (generalexpression -> STRING .)
    ELSE            reduce using rule 86 (generalexpression -> STRING .)
    ENDIF           reduce using rule 86 (generalexpression -> STRING .)
    WEND            reduce using rule 86 (generalexpression -> STRING .)
    NEXT            reduce using rule 86 (generalexpression -> STRING .)
    RIGHTPAR        reduce using rule 86 (generalexpression -> STRING .)


state 98

    (93) arithmeticexpression -> LEFTPAR . arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 142

state 99

    (94) arithmeticexpression -> NUMBER .

    PLUS            reduce using rule 94 (arithmeticexpression -> NUMBER .)
    MINUS           reduce using rule 94 (arithmeticexpression -> NUMBER .)
    MULTIPLY        reduce using rule 94 (arithmeticexpression -> NUMBER .)
    DIVIDE          reduce using rule 94 (arithmeticexpression -> NUMBER .)
    MODULO          reduce using rule 94 (arithmeticexpression -> NUMBER .)
    ID              reduce using rule 94 (arithmeticexpression -> NUMBER .)
    INPUT           reduce using rule 94 (arithmeticexpression -> NUMBER .)
    PRINTLN         reduce using rule 94 (arithmeticexpression -> NUMBER .)
    PRINT           reduce using rule 94 (arithmeticexpression -> NUMBER .)
    IF              reduce using rule 94 (arithmeticexpression -> NUMBER .)
    WHILE           reduce using rule 94 (arithmeticexpression -> NUMBER .)
    DO              reduce using rule 94 (arithmeticexpression -> NUMBER .)
    FOR             reduce using rule 94 (arithmeticexpression -> NUMBER .)
    CALL            reduce using rule 94 (arithmeticexpression -> NUMBER .)
    RETURN          reduce using rule 94 (arithmeticexpression -> NUMBER .)
    END             reduce using rule 94 (arithmeticexpression -> NUMBER .)
    LOOPWHILE       reduce using rule 94 (arithmeticexpression -> NUMBER .)
    ELSE            reduce using rule 94 (arithmeticexpression -> NUMBER .)
    ENDIF           reduce using rule 94 (arithmeticexpression -> NUMBER .)
    WEND            reduce using rule 94 (arithmeticexpression -> NUMBER .)
    NEXT            reduce using rule 94 (arithmeticexpression -> NUMBER .)
    RIGHTBRACKET    reduce using rule 94 (arithmeticexpression -> NUMBER .)
    RIGHTPAR        reduce using rule 94 (arithmeticexpression -> NUMBER .)
    TO              reduce using rule 94 (arithmeticexpression -> NUMBER .)
    COMMA           reduce using rule 94 (arithmeticexpression -> NUMBER .)


state 100

    (33) assign_dc -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 143
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 101

    (69) unitary_dc -> ID PLUS PLUS .

    ID              reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    INPUT           reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    PRINTLN         reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    PRINT           reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    IF              reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    WHILE           reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    DO              reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    FOR             reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    CALL            reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    RETURN          reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    END             reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    LOOPWHILE       reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    ELSE            reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    ENDIF           reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    WEND            reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)
    NEXT            reduce using rule 69 (unitary_dc -> ID PLUS PLUS .)


state 102

    (71) binary_dc -> ID PLUS EQUALS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 144

state 103

    (70) unitary_dc -> ID MINUS MINUS .

    ID              reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    INPUT           reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    PRINTLN         reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    PRINT           reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    IF              reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    WHILE           reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    DO              reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    FOR             reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    CALL            reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    RETURN          reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    END             reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    LOOPWHILE       reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    ELSE            reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    ENDIF           reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    WEND            reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)
    NEXT            reduce using rule 70 (unitary_dc -> ID MINUS MINUS .)


state 104

    (72) binary_dc -> ID MINUS EQUALS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 145

state 105

    (73) binary_dc -> ID MULTIPLY EQUALS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 146

state 106

    (74) binary_dc -> ID DIVIDE EQUALS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 147

state 107

    (75) binary_dc -> ID MODULO EQUALS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 148

state 108

    (76) resize_dc -> ID DOT RESIZE . LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> ID DOT RESIZE . LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID DOT RESIZE . LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR

    LEFTPAR         shift and go to state 149


state 109

    (79) add_dc -> ID DOT ADD . LEFTPAR generalexpression RIGHTPAR

    LEFTPAR         shift and go to state 150


state 110

    (80) add_dc -> ID DOT ADDROW . LEFTPAR RIGHTPAR

    LEFTPAR         shift and go to state 151


state 111

    (81) add_dc -> ID DOT ADDCOL . LEFTPAR RIGHTPAR

    LEFTPAR         shift and go to state 152


state 112

    (82) add_dc -> ID DOT ADDX . LEFTPAR RIGHTPAR

    LEFTPAR         shift and go to state 153


state 113

    (83) add_dc -> ID DOT ADDY . LEFTPAR RIGHTPAR

    LEFTPAR         shift and go to state 154


state 114

    (84) add_dc -> ID DOT ADDZ . LEFTPAR RIGHTPAR

    LEFTPAR         shift and go to state 155


state 115

    (36) input_dc -> INPUT LEFTPAR ID . RIGHTPAR
    (37) input_dc -> INPUT LEFTPAR ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> INPUT LEFTPAR ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR

    RIGHTPAR        shift and go to state 156
    LEFTBRACKET     shift and go to state 157


state 116

    (40) print_dc -> PRINTLN LEFTPAR printarithmetic . RIGHTPAR
    (42) printarithmetic -> printarithmetic . PLUS printarithmetic

    RIGHTPAR        shift and go to state 158
    PLUS            shift and go to state 159


state 117

    (43) printarithmetic -> ID .
    (46) printarithmetic -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (47) printarithmetic -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    RIGHTPAR        reduce using rule 43 (printarithmetic -> ID .)
    PLUS            reduce using rule 43 (printarithmetic -> ID .)
    LEFTBRACKET     shift and go to state 160


state 118

    (44) printarithmetic -> NUMBER .

    RIGHTPAR        reduce using rule 44 (printarithmetic -> NUMBER .)
    PLUS            reduce using rule 44 (printarithmetic -> NUMBER .)


state 119

    (45) printarithmetic -> STRING .

    RIGHTPAR        reduce using rule 45 (printarithmetic -> STRING .)
    PLUS            reduce using rule 45 (printarithmetic -> STRING .)


state 120

    (41) print_dc -> PRINT LEFTPAR printarithmetic . RIGHTPAR
    (42) printarithmetic -> printarithmetic . PLUS printarithmetic

    RIGHTPAR        shift and go to state 161
    PLUS            shift and go to state 159


state 121

    (49) print_dc -> PRINT LEFTPAR ENDL . RIGHTPAR

    RIGHTPAR        shift and go to state 162


state 122

    (101) logicexpression -> LEFTPAR . logicexpression RIGHTPAR
    (114) logicOption -> LEFTPAR . logicOption RIGHTPAR
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicexpression                shift and go to state 163
    logicOption                    shift and go to state 164

state 123

    (50) if_dc -> IF LEFTPAR logicresult . seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (51) seen_LogicResultIf -> .

    RIGHTPAR        reduce using rule 51 (seen_LogicResultIf -> .)

    seen_LogicResultIf             shift and go to state 165

state 124

    (98) logicresult -> logicexpression .
    (99) logicexpression -> logicexpression . AND logicexpression
    (100) logicexpression -> logicexpression . OR logicexpression

    RIGHTPAR        reduce using rule 98 (logicresult -> logicexpression .)
    AND             shift and go to state 166
    OR              shift and go to state 167


state 125

    (102) logicexpression -> logicOption . SAME logicOption
    (103) logicexpression -> logicOption . DIFFERENT logicOption
    (104) logicexpression -> logicOption . GREATERTHAN logicOption
    (105) logicexpression -> logicOption . LESSTHAN logicOption
    (106) logicexpression -> logicOption . GREATEREQUAL logicOption
    (107) logicexpression -> logicOption . LESSEQUAL logicOption

    SAME            shift and go to state 168
    DIFFERENT       shift and go to state 169
    GREATERTHAN     shift and go to state 170
    LESSTHAN        shift and go to state 171
    GREATEREQUAL    shift and go to state 172
    LESSEQUAL       shift and go to state 173


state 126

    (108) logicOption -> ID .
    (109) logicOption -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> ID . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    SAME            reduce using rule 108 (logicOption -> ID .)
    DIFFERENT       reduce using rule 108 (logicOption -> ID .)
    GREATERTHAN     reduce using rule 108 (logicOption -> ID .)
    LESSTHAN        reduce using rule 108 (logicOption -> ID .)
    GREATEREQUAL    reduce using rule 108 (logicOption -> ID .)
    LESSEQUAL       reduce using rule 108 (logicOption -> ID .)
    RIGHTPAR        reduce using rule 108 (logicOption -> ID .)
    AND             reduce using rule 108 (logicOption -> ID .)
    OR              reduce using rule 108 (logicOption -> ID .)
    LEFTBRACKET     shift and go to state 174


state 127

    (112) logicOption -> NUMBER .

    SAME            reduce using rule 112 (logicOption -> NUMBER .)
    DIFFERENT       reduce using rule 112 (logicOption -> NUMBER .)
    GREATERTHAN     reduce using rule 112 (logicOption -> NUMBER .)
    LESSTHAN        reduce using rule 112 (logicOption -> NUMBER .)
    GREATEREQUAL    reduce using rule 112 (logicOption -> NUMBER .)
    LESSEQUAL       reduce using rule 112 (logicOption -> NUMBER .)
    RIGHTPAR        reduce using rule 112 (logicOption -> NUMBER .)
    AND             reduce using rule 112 (logicOption -> NUMBER .)
    OR              reduce using rule 112 (logicOption -> NUMBER .)


state 128

    (113) logicOption -> STRING .

    SAME            reduce using rule 113 (logicOption -> STRING .)
    DIFFERENT       reduce using rule 113 (logicOption -> STRING .)
    GREATERTHAN     reduce using rule 113 (logicOption -> STRING .)
    LESSTHAN        reduce using rule 113 (logicOption -> STRING .)
    GREATEREQUAL    reduce using rule 113 (logicOption -> STRING .)
    LESSEQUAL       reduce using rule 113 (logicOption -> STRING .)
    RIGHTPAR        reduce using rule 113 (logicOption -> STRING .)
    AND             reduce using rule 113 (logicOption -> STRING .)
    OR              reduce using rule 113 (logicOption -> STRING .)


state 129

    (56) while_dc -> WHILE seen_While LEFTPAR . logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (98) logicresult -> . logicexpression
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicresult                    shift and go to state 175
    logicexpression                shift and go to state 124
    logicOption                    shift and go to state 125

state 130

    (60) dowhile_dc -> DO seen_Do statements_dc . LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR

    LOOPWHILE       shift and go to state 176


state 131

    (63) for_dc -> FOR seen_ID EQUALS . arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 177

state 132

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR . ID

    ID              shift and go to state 178


state 133

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA . NUMBER RIGHTPAR ID

    NUMBER          shift and go to state 179


state 134

    (11) mainblock -> MAIN startPosition statements_dc endPosition END .

    $end            reduce using rule 11 (mainblock -> MAIN startPosition statements_dc endPosition END .)


state 135

    (7) subprocedures -> FUNCTION seen_SubId statements_dc endProcedure RETURN subprocedures .

    MAIN            reduce using rule 7 (subprocedures -> FUNCTION seen_SubId statements_dc endProcedure RETURN subprocedures .)


state 136

    (95) arithmeticexpression -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 180

state 137

    (87) arithmeticexpression -> arithmeticexpression PLUS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 181

state 138

    (88) arithmeticexpression -> arithmeticexpression MINUS . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 182

state 139

    (89) arithmeticexpression -> arithmeticexpression MULTIPLY . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 183

state 140

    (90) arithmeticexpression -> arithmeticexpression DIVIDE . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 184

state 141

    (91) arithmeticexpression -> arithmeticexpression MODULO . arithmeticexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 185

state 142

    (93) arithmeticexpression -> LEFTPAR arithmeticexpression . RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTPAR        shift and go to state 186
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 143

    (33) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . EQUALS generalexpression
    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression

    EQUALS          shift and go to state 188
    LEFTBRACKET     shift and go to state 187


state 144

    (71) binary_dc -> ID PLUS EQUALS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    INPUT           reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    PRINTLN         reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    PRINT           reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    IF              reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    WHILE           reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    DO              reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    FOR             reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    CALL            reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    RETURN          reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    END             reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    LOOPWHILE       reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    ELSE            reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    ENDIF           reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    WEND            reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    NEXT            reduce using rule 71 (binary_dc -> ID PLUS EQUALS arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 145

    (72) binary_dc -> ID MINUS EQUALS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    INPUT           reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    PRINTLN         reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    PRINT           reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    IF              reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    WHILE           reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    DO              reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    FOR             reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    CALL            reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    RETURN          reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    END             reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    LOOPWHILE       reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    ELSE            reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    ENDIF           reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    WEND            reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    NEXT            reduce using rule 72 (binary_dc -> ID MINUS EQUALS arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 146

    (73) binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    INPUT           reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    PRINTLN         reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    PRINT           reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    IF              reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    WHILE           reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    DO              reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    FOR             reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    CALL            reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    RETURN          reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    END             reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    LOOPWHILE       reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    ELSE            reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    ENDIF           reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    WEND            reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    NEXT            reduce using rule 73 (binary_dc -> ID MULTIPLY EQUALS arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 147

    (74) binary_dc -> ID DIVIDE EQUALS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    INPUT           reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    PRINTLN         reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    PRINT           reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    IF              reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    WHILE           reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    DO              reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    FOR             reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    CALL            reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    RETURN          reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    END             reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    LOOPWHILE       reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    ELSE            reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    ENDIF           reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    WEND            reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    NEXT            reduce using rule 74 (binary_dc -> ID DIVIDE EQUALS arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 148

    (75) binary_dc -> ID MODULO EQUALS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    ID              reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    INPUT           reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    PRINTLN         reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    PRINT           reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    IF              reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    WHILE           reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    DO              reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    FOR             reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    CALL            reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    RETURN          reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    END             reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    LOOPWHILE       reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    ELSE            reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    ENDIF           reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    WEND            reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    NEXT            reduce using rule 75 (binary_dc -> ID MODULO EQUALS arithmeticexpression .)
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 149

    (76) resize_dc -> ID DOT RESIZE LEFTPAR . arithmeticexpression RIGHTPAR
    (77) resize_dc -> ID DOT RESIZE LEFTPAR . arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID DOT RESIZE LEFTPAR . arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 189

state 150

    (79) add_dc -> ID DOT ADD LEFTPAR . generalexpression RIGHTPAR
    (85) generalexpression -> . arithmeticexpression
    (86) generalexpression -> . STRING
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    STRING          shift and go to state 97
    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    generalexpression              shift and go to state 190
    arithmeticexpression           shift and go to state 96

state 151

    (80) add_dc -> ID DOT ADDROW LEFTPAR . RIGHTPAR

    RIGHTPAR        shift and go to state 191


state 152

    (81) add_dc -> ID DOT ADDCOL LEFTPAR . RIGHTPAR

    RIGHTPAR        shift and go to state 192


state 153

    (82) add_dc -> ID DOT ADDX LEFTPAR . RIGHTPAR

    RIGHTPAR        shift and go to state 193


state 154

    (83) add_dc -> ID DOT ADDY LEFTPAR . RIGHTPAR

    RIGHTPAR        shift and go to state 194


state 155

    (84) add_dc -> ID DOT ADDZ LEFTPAR . RIGHTPAR

    RIGHTPAR        shift and go to state 195


state 156

    (36) input_dc -> INPUT LEFTPAR ID RIGHTPAR .

    ID              reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    INPUT           reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    PRINTLN         reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    PRINT           reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    IF              reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    WHILE           reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    DO              reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    FOR             reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    CALL            reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    RETURN          reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    END             reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    LOOPWHILE       reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    ELSE            reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    ENDIF           reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    WEND            reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)
    NEXT            reduce using rule 36 (input_dc -> INPUT LEFTPAR ID RIGHTPAR .)


state 157

    (37) input_dc -> INPUT LEFTPAR ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 196

state 158

    (40) print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .

    ID              reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    INPUT           reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    PRINTLN         reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    PRINT           reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    IF              reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    WHILE           reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    DO              reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    FOR             reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    CALL            reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    RETURN          reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    END             reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    LOOPWHILE       reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    ELSE            reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    ENDIF           reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    WEND            reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)
    NEXT            reduce using rule 40 (print_dc -> PRINTLN LEFTPAR printarithmetic RIGHTPAR .)


state 159

    (42) printarithmetic -> printarithmetic PLUS . printarithmetic
    (42) printarithmetic -> . printarithmetic PLUS printarithmetic
    (43) printarithmetic -> . ID
    (44) printarithmetic -> . NUMBER
    (45) printarithmetic -> . STRING
    (46) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (47) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 117
    NUMBER          shift and go to state 118
    STRING          shift and go to state 119

    printarithmetic                shift and go to state 197

state 160

    (46) printarithmetic -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (47) printarithmetic -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 198

state 161

    (41) print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .

    ID              reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    INPUT           reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    PRINTLN         reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    PRINT           reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    IF              reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    WHILE           reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    DO              reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    FOR             reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    CALL            reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    RETURN          reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    END             reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    LOOPWHILE       reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    ELSE            reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    ENDIF           reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    WEND            reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)
    NEXT            reduce using rule 41 (print_dc -> PRINT LEFTPAR printarithmetic RIGHTPAR .)


state 162

    (49) print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .

    ID              reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    INPUT           reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    PRINTLN         reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    PRINT           reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    IF              reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    WHILE           reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    DO              reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    FOR             reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    CALL            reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    RETURN          reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    END             reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    LOOPWHILE       reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    ELSE            reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    ENDIF           reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    WEND            reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)
    NEXT            reduce using rule 49 (print_dc -> PRINT LEFTPAR ENDL RIGHTPAR .)


state 163

    (101) logicexpression -> LEFTPAR logicexpression . RIGHTPAR
    (99) logicexpression -> logicexpression . AND logicexpression
    (100) logicexpression -> logicexpression . OR logicexpression

    RIGHTPAR        shift and go to state 199
    AND             shift and go to state 166
    OR              shift and go to state 167


state 164

    (114) logicOption -> LEFTPAR logicOption . RIGHTPAR
    (102) logicexpression -> logicOption . SAME logicOption
    (103) logicexpression -> logicOption . DIFFERENT logicOption
    (104) logicexpression -> logicOption . GREATERTHAN logicOption
    (105) logicexpression -> logicOption . LESSTHAN logicOption
    (106) logicexpression -> logicOption . GREATEREQUAL logicOption
    (107) logicexpression -> logicOption . LESSEQUAL logicOption

    RIGHTPAR        shift and go to state 200
    SAME            shift and go to state 168
    DIFFERENT       shift and go to state 169
    GREATERTHAN     shift and go to state 170
    LESSTHAN        shift and go to state 171
    GREATEREQUAL    shift and go to state 172
    LESSEQUAL       shift and go to state 173


state 165

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf . RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF

    RIGHTPAR        shift and go to state 201


state 166

    (99) logicexpression -> logicexpression AND . logicexpression
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicexpression                shift and go to state 202
    logicOption                    shift and go to state 125

state 167

    (100) logicexpression -> logicexpression OR . logicexpression
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicexpression                shift and go to state 203
    logicOption                    shift and go to state 125

state 168

    (102) logicexpression -> logicOption SAME . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 204

state 169

    (103) logicexpression -> logicOption DIFFERENT . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 206

state 170

    (104) logicexpression -> logicOption GREATERTHAN . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 207

state 171

    (105) logicexpression -> logicOption LESSTHAN . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 208

state 172

    (106) logicexpression -> logicOption GREATEREQUAL . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 209

state 173

    (107) logicexpression -> logicOption LESSEQUAL . logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 210

state 174

    (109) logicOption -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (110) logicOption -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> ID LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 211

state 175

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult . seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (58) seen_LogicResultWhile -> .

    RIGHTPAR        reduce using rule 58 (seen_LogicResultWhile -> .)

    seen_LogicResultWhile          shift and go to state 212

state 176

    (60) dowhile_dc -> DO seen_Do statements_dc LOOPWHILE . LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR

    LEFTPAR         shift and go to state 213


state 177

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression . seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression
    (65) seen_AE1 -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141
    TO              reduce using rule 65 (seen_AE1 -> .)

    seen_AE1                       shift and go to state 214

state 178

    (30) objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .

    VAR             reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)
    VECTOR_KEYWORD  reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)
    MAT_KEYWORD     reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)
    CUBE_KEYWORD    reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)
    FUNCTION        reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)
    MAIN            reduce using rule 30 (objectvariables_dc -> MAT_KEYWORD LEFTPAR NUMBER COMMA NUMBER RIGHTPAR ID .)


state 179

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER . RIGHTPAR ID

    RIGHTPAR        shift and go to state 215


state 180

    (95) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (96) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 216
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 181

    (87) arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    PLUS            reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    MINUS           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    ID              reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    INPUT           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    PRINTLN         reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    PRINT           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    IF              reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    WHILE           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    DO              reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    FOR             reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    CALL            reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    RETURN          reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    END             reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    LOOPWHILE       reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    ELSE            reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    ENDIF           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    WEND            reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    NEXT            reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    RIGHTBRACKET    reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    RIGHTPAR        reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    TO              reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    COMMA           reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .)
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141

  ! MULTIPLY        [ reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .) ]
  ! DIVIDE          [ reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .) ]
  ! MODULO          [ reduce using rule 87 (arithmeticexpression -> arithmeticexpression PLUS arithmeticexpression .) ]
  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]


state 182

    (88) arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    PLUS            reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    MINUS           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    ID              reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    INPUT           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    PRINTLN         reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    PRINT           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    IF              reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    WHILE           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    DO              reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    FOR             reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    CALL            reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    RETURN          reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    END             reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    LOOPWHILE       reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    ELSE            reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    ENDIF           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    WEND            reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    NEXT            reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    RIGHTBRACKET    reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    RIGHTPAR        reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    TO              reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    COMMA           reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .)
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141

  ! MULTIPLY        [ reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .) ]
  ! DIVIDE          [ reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .) ]
  ! MODULO          [ reduce using rule 88 (arithmeticexpression -> arithmeticexpression MINUS arithmeticexpression .) ]
  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]


state 183

    (89) arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    PLUS            reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    MINUS           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    MULTIPLY        reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    DIVIDE          reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    MODULO          reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    ID              reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    INPUT           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    PRINTLN         reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    PRINT           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    IF              reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    WHILE           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    DO              reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    FOR             reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    CALL            reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    RETURN          reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    END             reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    LOOPWHILE       reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    ELSE            reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    ENDIF           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    WEND            reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    NEXT            reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    RIGHTBRACKET    reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    RIGHTPAR        reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    TO              reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)
    COMMA           reduce using rule 89 (arithmeticexpression -> arithmeticexpression MULTIPLY arithmeticexpression .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MULTIPLY        [ shift and go to state 139 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! MODULO          [ shift and go to state 141 ]


state 184

    (90) arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    PLUS            reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    MINUS           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    MULTIPLY        reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    DIVIDE          reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    MODULO          reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    ID              reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    INPUT           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    PRINTLN         reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    PRINT           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    IF              reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    WHILE           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    DO              reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    FOR             reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    CALL            reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    RETURN          reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    END             reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    LOOPWHILE       reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    ELSE            reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    ENDIF           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    WEND            reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    NEXT            reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    RIGHTBRACKET    reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    RIGHTPAR        reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    TO              reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)
    COMMA           reduce using rule 90 (arithmeticexpression -> arithmeticexpression DIVIDE arithmeticexpression .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MULTIPLY        [ shift and go to state 139 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! MODULO          [ shift and go to state 141 ]


state 185

    (91) arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    PLUS            reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    MINUS           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    MULTIPLY        reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    DIVIDE          reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    MODULO          reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    ID              reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    INPUT           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    PRINTLN         reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    PRINT           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    IF              reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    WHILE           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    DO              reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    FOR             reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    CALL            reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    RETURN          reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    END             reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    LOOPWHILE       reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    ELSE            reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    ENDIF           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    WEND            reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    NEXT            reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    RIGHTBRACKET    reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    RIGHTPAR        reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    TO              reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)
    COMMA           reduce using rule 91 (arithmeticexpression -> arithmeticexpression MODULO arithmeticexpression .)

  ! PLUS            [ shift and go to state 137 ]
  ! MINUS           [ shift and go to state 138 ]
  ! MULTIPLY        [ shift and go to state 139 ]
  ! DIVIDE          [ shift and go to state 140 ]
  ! MODULO          [ shift and go to state 141 ]


state 186

    (93) arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .

    PLUS            reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    MINUS           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    MULTIPLY        reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    DIVIDE          reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    MODULO          reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    ID              reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    INPUT           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    PRINTLN         reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    PRINT           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    IF              reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    WHILE           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    DO              reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    FOR             reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    CALL            reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    RETURN          reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    END             reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    LOOPWHILE       reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    ELSE            reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    ENDIF           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    WEND            reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    NEXT            reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    RIGHTBRACKET    reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    RIGHTPAR        reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    TO              reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)
    COMMA           reduce using rule 93 (arithmeticexpression -> LEFTPAR arithmeticexpression RIGHTPAR .)


state 187

    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 217

state 188

    (33) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS . generalexpression
    (85) generalexpression -> . arithmeticexpression
    (86) generalexpression -> . STRING
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    STRING          shift and go to state 97
    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 96
    generalexpression              shift and go to state 218

state 189

    (76) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression . RIGHTPAR
    (77) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression . COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression . COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTPAR        shift and go to state 219
    COMMA           shift and go to state 220
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 190

    (79) add_dc -> ID DOT ADD LEFTPAR generalexpression . RIGHTPAR

    RIGHTPAR        shift and go to state 221


state 191

    (80) add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .

    ID              reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    INPUT           reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    PRINTLN         reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    PRINT           reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    IF              reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    WHILE           reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    DO              reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    FOR             reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    CALL            reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    RETURN          reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    END             reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    LOOPWHILE       reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    ENDIF           reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    WEND            reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)
    NEXT            reduce using rule 80 (add_dc -> ID DOT ADDROW LEFTPAR RIGHTPAR .)


state 192

    (81) add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .

    ID              reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    INPUT           reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    PRINTLN         reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    PRINT           reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    IF              reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    WHILE           reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    DO              reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    FOR             reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    CALL            reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    RETURN          reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    END             reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    LOOPWHILE       reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    ENDIF           reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    WEND            reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)
    NEXT            reduce using rule 81 (add_dc -> ID DOT ADDCOL LEFTPAR RIGHTPAR .)


state 193

    (82) add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .

    ID              reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    INPUT           reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    PRINTLN         reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    PRINT           reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    IF              reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    WHILE           reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    DO              reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    FOR             reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    CALL            reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    RETURN          reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    END             reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    LOOPWHILE       reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    ENDIF           reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    WEND            reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)
    NEXT            reduce using rule 82 (add_dc -> ID DOT ADDX LEFTPAR RIGHTPAR .)


state 194

    (83) add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .

    ID              reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    INPUT           reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    PRINTLN         reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    PRINT           reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    IF              reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    WHILE           reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    DO              reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    FOR             reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    CALL            reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    RETURN          reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    END             reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    LOOPWHILE       reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    ENDIF           reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    WEND            reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)
    NEXT            reduce using rule 83 (add_dc -> ID DOT ADDY LEFTPAR RIGHTPAR .)


state 195

    (84) add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .

    ID              reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    INPUT           reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    PRINTLN         reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    PRINT           reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    IF              reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    WHILE           reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    DO              reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    FOR             reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    CALL            reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    RETURN          reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    END             reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    LOOPWHILE       reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    ENDIF           reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    WEND            reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)
    NEXT            reduce using rule 84 (add_dc -> ID DOT ADDZ LEFTPAR RIGHTPAR .)


state 196

    (37) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET RIGHTPAR
    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 222
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 197

    (42) printarithmetic -> printarithmetic PLUS printarithmetic .
    (42) printarithmetic -> printarithmetic . PLUS printarithmetic

    RIGHTPAR        reduce using rule 42 (printarithmetic -> printarithmetic PLUS printarithmetic .)
    PLUS            reduce using rule 42 (printarithmetic -> printarithmetic PLUS printarithmetic .)

  ! PLUS            [ shift and go to state 159 ]


state 198

    (46) printarithmetic -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (47) printarithmetic -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 223
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 199

    (101) logicexpression -> LEFTPAR logicexpression RIGHTPAR .

    AND             reduce using rule 101 (logicexpression -> LEFTPAR logicexpression RIGHTPAR .)
    OR              reduce using rule 101 (logicexpression -> LEFTPAR logicexpression RIGHTPAR .)
    RIGHTPAR        reduce using rule 101 (logicexpression -> LEFTPAR logicexpression RIGHTPAR .)


state 200

    (114) logicOption -> LEFTPAR logicOption RIGHTPAR .

    SAME            reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    DIFFERENT       reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    GREATERTHAN     reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    LESSTHAN        reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    GREATEREQUAL    reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    LESSEQUAL       reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    RIGHTPAR        reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    AND             reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)
    OR              reduce using rule 114 (logicOption -> LEFTPAR logicOption RIGHTPAR .)


state 201

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR . statements_dc if_elsepart seen_IfEnd ENDIF
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    ELSE            reduce using rule 115 (empty -> .)
    ENDIF           reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 224
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 202

    (99) logicexpression -> logicexpression AND logicexpression .
    (99) logicexpression -> logicexpression . AND logicexpression
    (100) logicexpression -> logicexpression . OR logicexpression

    AND             reduce using rule 99 (logicexpression -> logicexpression AND logicexpression .)
    OR              reduce using rule 99 (logicexpression -> logicexpression AND logicexpression .)
    RIGHTPAR        reduce using rule 99 (logicexpression -> logicexpression AND logicexpression .)

  ! AND             [ shift and go to state 166 ]
  ! OR              [ shift and go to state 167 ]


state 203

    (100) logicexpression -> logicexpression OR logicexpression .
    (99) logicexpression -> logicexpression . AND logicexpression
    (100) logicexpression -> logicexpression . OR logicexpression

    AND             reduce using rule 100 (logicexpression -> logicexpression OR logicexpression .)
    OR              reduce using rule 100 (logicexpression -> logicexpression OR logicexpression .)
    RIGHTPAR        reduce using rule 100 (logicexpression -> logicexpression OR logicexpression .)

  ! AND             [ shift and go to state 166 ]
  ! OR              [ shift and go to state 167 ]


state 204

    (102) logicexpression -> logicOption SAME logicOption .

    AND             reduce using rule 102 (logicexpression -> logicOption SAME logicOption .)
    OR              reduce using rule 102 (logicexpression -> logicOption SAME logicOption .)
    RIGHTPAR        reduce using rule 102 (logicexpression -> logicOption SAME logicOption .)


state 205

    (114) logicOption -> LEFTPAR . logicOption RIGHTPAR
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128
    LEFTPAR         shift and go to state 205

    logicOption                    shift and go to state 225

state 206

    (103) logicexpression -> logicOption DIFFERENT logicOption .

    AND             reduce using rule 103 (logicexpression -> logicOption DIFFERENT logicOption .)
    OR              reduce using rule 103 (logicexpression -> logicOption DIFFERENT logicOption .)
    RIGHTPAR        reduce using rule 103 (logicexpression -> logicOption DIFFERENT logicOption .)


state 207

    (104) logicexpression -> logicOption GREATERTHAN logicOption .

    AND             reduce using rule 104 (logicexpression -> logicOption GREATERTHAN logicOption .)
    OR              reduce using rule 104 (logicexpression -> logicOption GREATERTHAN logicOption .)
    RIGHTPAR        reduce using rule 104 (logicexpression -> logicOption GREATERTHAN logicOption .)


state 208

    (105) logicexpression -> logicOption LESSTHAN logicOption .

    AND             reduce using rule 105 (logicexpression -> logicOption LESSTHAN logicOption .)
    OR              reduce using rule 105 (logicexpression -> logicOption LESSTHAN logicOption .)
    RIGHTPAR        reduce using rule 105 (logicexpression -> logicOption LESSTHAN logicOption .)


state 209

    (106) logicexpression -> logicOption GREATEREQUAL logicOption .

    AND             reduce using rule 106 (logicexpression -> logicOption GREATEREQUAL logicOption .)
    OR              reduce using rule 106 (logicexpression -> logicOption GREATEREQUAL logicOption .)
    RIGHTPAR        reduce using rule 106 (logicexpression -> logicOption GREATEREQUAL logicOption .)


state 210

    (107) logicexpression -> logicOption LESSEQUAL logicOption .

    AND             reduce using rule 107 (logicexpression -> logicOption LESSEQUAL logicOption .)
    OR              reduce using rule 107 (logicexpression -> logicOption LESSEQUAL logicOption .)
    RIGHTPAR        reduce using rule 107 (logicexpression -> logicOption LESSEQUAL logicOption .)


state 211

    (109) logicOption -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (110) logicOption -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> ID LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 226
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 212

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile . RIGHTPAR statements_dc seen_WhileEnd WEND

    RIGHTPAR        shift and go to state 227


state 213

    (60) dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR . logicresult seen_LogicResultDoWhile RIGHTPAR
    (98) logicresult -> . logicexpression
    (99) logicexpression -> . logicexpression AND logicexpression
    (100) logicexpression -> . logicexpression OR logicexpression
    (101) logicexpression -> . LEFTPAR logicexpression RIGHTPAR
    (102) logicexpression -> . logicOption SAME logicOption
    (103) logicexpression -> . logicOption DIFFERENT logicOption
    (104) logicexpression -> . logicOption GREATERTHAN logicOption
    (105) logicexpression -> . logicOption LESSTHAN logicOption
    (106) logicexpression -> . logicOption GREATEREQUAL logicOption
    (107) logicexpression -> . logicOption LESSEQUAL logicOption
    (108) logicOption -> . ID
    (109) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (110) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (112) logicOption -> . NUMBER
    (113) logicOption -> . STRING
    (114) logicOption -> . LEFTPAR logicOption RIGHTPAR

    LEFTPAR         shift and go to state 122
    ID              shift and go to state 126
    NUMBER          shift and go to state 127
    STRING          shift and go to state 128

    logicresult                    shift and go to state 228
    logicexpression                shift and go to state 124
    logicOption                    shift and go to state 125

state 214

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 . TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT

    TO              shift and go to state 229


state 215

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR . ID

    ID              shift and go to state 230


state 216

    (95) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (96) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    PLUS            reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MINUS           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MULTIPLY        reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIVIDE          reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MODULO          reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ID              reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    INPUT           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINTLN         reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINT           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    IF              reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WHILE           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DO              reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    FOR             reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    CALL            reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RETURN          reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    END             reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LOOPWHILE       reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ELSE            reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ENDIF           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WEND            reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    NEXT            reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    TO              reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    COMMA           reduce using rule 95 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 231


state 217

    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 232
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 218

    (33) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .

    ID              reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    INPUT           reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINTLN         reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINT           reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    IF              reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WHILE           reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    DO              reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    FOR             reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    CALL            reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    RETURN          reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    END             reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    LOOPWHILE       reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ELSE            reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ENDIF           reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WEND            reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    NEXT            reduce using rule 33 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)


state 219

    (76) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .

    ID              reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    INPUT           reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    PRINTLN         reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    PRINT           reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    IF              reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    WHILE           reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    DO              reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    FOR             reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    CALL            reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    RETURN          reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    END             reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    LOOPWHILE       reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    ELSE            reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    ENDIF           reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    WEND            reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)
    NEXT            reduce using rule 76 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR .)


state 220

    (77) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA . arithmeticexpression RIGHTPAR
    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA . arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 233

state 221

    (79) add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .

    ID              reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    INPUT           reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    PRINTLN         reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    PRINT           reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    IF              reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    WHILE           reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    DO              reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    FOR             reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    CALL            reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    RETURN          reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    END             reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    LOOPWHILE       reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    ELSE            reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    ENDIF           reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    WEND            reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)
    NEXT            reduce using rule 79 (add_dc -> ID DOT ADD LEFTPAR generalexpression RIGHTPAR .)


state 222

    (37) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . RIGHTPAR
    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR

    RIGHTPAR        shift and go to state 235
    LEFTBRACKET     shift and go to state 234


state 223

    (46) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (47) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    RIGHTPAR        reduce using rule 46 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PLUS            reduce using rule 46 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 236


state 224

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc . if_elsepart seen_IfEnd ENDIF
    (52) if_elsepart -> . ELSE seen_Else statements_dc
    (53) if_elsepart -> . empty
    (115) empty -> .

    ELSE            shift and go to state 238
    ENDIF           reduce using rule 115 (empty -> .)

    if_elsepart                    shift and go to state 237
    empty                          shift and go to state 239

state 225

    (114) logicOption -> LEFTPAR logicOption . RIGHTPAR

    RIGHTPAR        shift and go to state 200


state 226

    (109) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (110) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    SAME            reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIFFERENT       reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATERTHAN     reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSTHAN        reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSEQUAL       reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    AND             reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    OR              reduce using rule 109 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 240


state 227

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR . statements_dc seen_WhileEnd WEND
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    WEND            reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 241
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 228

    (60) dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult . seen_LogicResultDoWhile RIGHTPAR
    (62) seen_LogicResultDoWhile -> .

    RIGHTPAR        reduce using rule 62 (seen_LogicResultDoWhile -> .)

    seen_LogicResultDoWhile        shift and go to state 242

state 229

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO . arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 243

state 230

    (31) objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .

    VAR             reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)
    VECTOR_KEYWORD  reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)
    MAT_KEYWORD     reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)
    CUBE_KEYWORD    reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)
    FUNCTION        reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)
    MAIN            reduce using rule 31 (objectvariables_dc -> CUBE_KEYWORD LEFTPAR NUMBER COMMA NUMBER COMMA NUMBER RIGHTPAR ID .)


state 231

    (96) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 244

state 232

    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . EQUALS generalexpression
    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression

    EQUALS          shift and go to state 246
    LEFTBRACKET     shift and go to state 245


state 233

    (77) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression . RIGHTPAR
    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression . COMMA arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTPAR        shift and go to state 248
    COMMA           shift and go to state 247
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 234

    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 249

state 235

    (37) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .

    ID              reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    INPUT           reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINTLN         reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINT           reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    IF              reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WHILE           reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    DO              reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    FOR             reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    CALL            reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    RETURN          reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    END             reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    LOOPWHILE       reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ELSE            reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ENDIF           reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WEND            reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    NEXT            reduce using rule 37 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)


state 236

    (47) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 250

state 237

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart . seen_IfEnd ENDIF
    (55) seen_IfEnd -> .

    ENDIF           reduce using rule 55 (seen_IfEnd -> .)

    seen_IfEnd                     shift and go to state 251

state 238

    (52) if_elsepart -> ELSE . seen_Else statements_dc
    (54) seen_Else -> .

    ID              reduce using rule 54 (seen_Else -> .)
    INPUT           reduce using rule 54 (seen_Else -> .)
    PRINTLN         reduce using rule 54 (seen_Else -> .)
    PRINT           reduce using rule 54 (seen_Else -> .)
    IF              reduce using rule 54 (seen_Else -> .)
    WHILE           reduce using rule 54 (seen_Else -> .)
    DO              reduce using rule 54 (seen_Else -> .)
    FOR             reduce using rule 54 (seen_Else -> .)
    CALL            reduce using rule 54 (seen_Else -> .)
    ENDIF           reduce using rule 54 (seen_Else -> .)

    seen_Else                      shift and go to state 252

state 239

    (53) if_elsepart -> empty .

    ENDIF           reduce using rule 53 (if_elsepart -> empty .)


state 240

    (110) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 253

state 241

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc . seen_WhileEnd WEND
    (59) seen_WhileEnd -> .

    WEND            reduce using rule 59 (seen_WhileEnd -> .)

    seen_WhileEnd                  shift and go to state 254

state 242

    (60) dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile . RIGHTPAR

    RIGHTPAR        shift and go to state 255


state 243

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression . seen_AE2 statements_dc seen_Next NEXT
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression
    (66) seen_AE2 -> .

    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141
    ID              reduce using rule 66 (seen_AE2 -> .)
    INPUT           reduce using rule 66 (seen_AE2 -> .)
    PRINTLN         reduce using rule 66 (seen_AE2 -> .)
    PRINT           reduce using rule 66 (seen_AE2 -> .)
    IF              reduce using rule 66 (seen_AE2 -> .)
    WHILE           reduce using rule 66 (seen_AE2 -> .)
    DO              reduce using rule 66 (seen_AE2 -> .)
    FOR             reduce using rule 66 (seen_AE2 -> .)
    CALL            reduce using rule 66 (seen_AE2 -> .)
    NEXT            reduce using rule 66 (seen_AE2 -> .)

    seen_AE2                       shift and go to state 256

state 244

    (96) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 257
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 245

    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 258

state 246

    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS . generalexpression
    (85) generalexpression -> . arithmeticexpression
    (86) generalexpression -> . STRING
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    STRING          shift and go to state 97
    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 96
    generalexpression              shift and go to state 259

state 247

    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA . arithmeticexpression RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 260

state 248

    (77) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .

    ID              reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    INPUT           reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    PRINTLN         reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    PRINT           reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    IF              reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    WHILE           reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    DO              reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    FOR             reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    CALL            reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    RETURN          reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    END             reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    LOOPWHILE       reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    ELSE            reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    ENDIF           reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    WEND            reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    NEXT            reduce using rule 77 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)


state 249

    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 261
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 250

    (47) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 262
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 251

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd . ENDIF

    ENDIF           shift and go to state 263


state 252

    (52) if_elsepart -> ELSE seen_Else . statements_dc
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    ENDIF           reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 264
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 253

    (110) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 265
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 254

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd . WEND

    WEND            shift and go to state 266


state 255

    (60) dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .

    ID              reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    INPUT           reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    PRINTLN         reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    PRINT           reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    IF              reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    WHILE           reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    DO              reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    FOR             reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    CALL            reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    RETURN          reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    END             reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    LOOPWHILE       reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    ELSE            reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    ENDIF           reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    WEND            reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)
    NEXT            reduce using rule 60 (dowhile_dc -> DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR .)


state 256

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 . statements_dc seen_Next NEXT
    (14) statements_dc -> . assign_dc statements_dc
    (15) statements_dc -> . input_dc statements_dc
    (16) statements_dc -> . print_dc statements_dc
    (17) statements_dc -> . if_dc statements_dc
    (18) statements_dc -> . while_dc statements_dc
    (19) statements_dc -> . dowhile_dc statements_dc
    (20) statements_dc -> . for_dc statements_dc
    (21) statements_dc -> . call_dc statements_dc
    (22) statements_dc -> . unitary_dc statements_dc
    (23) statements_dc -> . binary_dc statements_dc
    (24) statements_dc -> . resize_dc statements_dc
    (25) statements_dc -> . add_dc statements_dc
    (26) statements_dc -> . empty
    (32) assign_dc -> . ID EQUALS generalexpression
    (33) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (34) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (35) assign_dc -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression
    (36) input_dc -> . INPUT LEFTPAR ID RIGHTPAR
    (37) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (38) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (39) input_dc -> . INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR
    (40) print_dc -> . PRINTLN LEFTPAR printarithmetic RIGHTPAR
    (41) print_dc -> . PRINT LEFTPAR printarithmetic RIGHTPAR
    (49) print_dc -> . PRINT LEFTPAR ENDL RIGHTPAR
    (50) if_dc -> . IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF
    (56) while_dc -> . WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND
    (60) dowhile_dc -> . DO seen_Do statements_dc LOOPWHILE LEFTPAR logicresult seen_LogicResultDoWhile RIGHTPAR
    (63) for_dc -> . FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT
    (68) call_dc -> . CALL ID
    (69) unitary_dc -> . ID PLUS PLUS
    (70) unitary_dc -> . ID MINUS MINUS
    (71) binary_dc -> . ID PLUS EQUALS arithmeticexpression
    (72) binary_dc -> . ID MINUS EQUALS arithmeticexpression
    (73) binary_dc -> . ID MULTIPLY EQUALS arithmeticexpression
    (74) binary_dc -> . ID DIVIDE EQUALS arithmeticexpression
    (75) binary_dc -> . ID MODULO EQUALS arithmeticexpression
    (76) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression RIGHTPAR
    (77) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (78) resize_dc -> . ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR
    (79) add_dc -> . ID DOT ADD LEFTPAR generalexpression RIGHTPAR
    (80) add_dc -> . ID DOT ADDROW LEFTPAR RIGHTPAR
    (81) add_dc -> . ID DOT ADDCOL LEFTPAR RIGHTPAR
    (82) add_dc -> . ID DOT ADDX LEFTPAR RIGHTPAR
    (83) add_dc -> . ID DOT ADDY LEFTPAR RIGHTPAR
    (84) add_dc -> . ID DOT ADDZ LEFTPAR RIGHTPAR
    (115) empty -> .

    ID              shift and go to state 44
    INPUT           shift and go to state 45
    PRINTLN         shift and go to state 46
    PRINT           shift and go to state 47
    IF              shift and go to state 48
    WHILE           shift and go to state 49
    DO              shift and go to state 50
    FOR             shift and go to state 51
    CALL            shift and go to state 52
    NEXT            reduce using rule 115 (empty -> .)

    statements_dc                  shift and go to state 267
    assign_dc                      shift and go to state 31
    input_dc                       shift and go to state 32
    print_dc                       shift and go to state 33
    if_dc                          shift and go to state 34
    while_dc                       shift and go to state 35
    dowhile_dc                     shift and go to state 36
    for_dc                         shift and go to state 37
    call_dc                        shift and go to state 38
    unitary_dc                     shift and go to state 39
    binary_dc                      shift and go to state 40
    resize_dc                      shift and go to state 41
    add_dc                         shift and go to state 42
    empty                          shift and go to state 43

state 257

    (96) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET

    PLUS            reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MINUS           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MULTIPLY        reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIVIDE          reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MODULO          reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ID              reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    INPUT           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINTLN         reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINT           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    IF              reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WHILE           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DO              reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    FOR             reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    CALL            reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RETURN          reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    END             reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LOOPWHILE       reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ELSE            reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ENDIF           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WEND            reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    NEXT            reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    TO              reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    COMMA           reduce using rule 96 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 268


state 258

    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET EQUALS generalexpression
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 269
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 259

    (34) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .

    ID              reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    INPUT           reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINTLN         reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINT           reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    IF              reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WHILE           reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    DO              reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    FOR             reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    CALL            reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    RETURN          reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    END             reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    LOOPWHILE       reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ELSE            reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ENDIF           reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WEND            reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    NEXT            reduce using rule 34 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)


state 260

    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression . RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTPAR        shift and go to state 270
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 261

    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . RIGHTPAR
    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR

    RIGHTPAR        shift and go to state 272
    LEFTBRACKET     shift and go to state 271


state 262

    (47) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET

    RIGHTPAR        reduce using rule 47 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PLUS            reduce using rule 47 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 273


state 263

    (50) if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .

    ID              reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    INPUT           reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    PRINTLN         reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    PRINT           reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    IF              reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    WHILE           reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    DO              reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    FOR             reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    CALL            reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    RETURN          reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    END             reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    LOOPWHILE       reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    ELSE            reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    ENDIF           reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    WEND            reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)
    NEXT            reduce using rule 50 (if_dc -> IF LEFTPAR logicresult seen_LogicResultIf RIGHTPAR statements_dc if_elsepart seen_IfEnd ENDIF .)


state 264

    (52) if_elsepart -> ELSE seen_Else statements_dc .

    ENDIF           reduce using rule 52 (if_elsepart -> ELSE seen_Else statements_dc .)


state 265

    (110) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .
    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . LEFTBRACKET arithmeticexpression RIGHTBRACKET

    SAME            reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIFFERENT       reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATERTHAN     reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSTHAN        reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSEQUAL       reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    AND             reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    OR              reduce using rule 110 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LEFTBRACKET     shift and go to state 274


state 266

    (56) while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .

    ID              reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    INPUT           reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    PRINTLN         reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    PRINT           reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    IF              reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    WHILE           reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    DO              reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    FOR             reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    CALL            reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    RETURN          reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    END             reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    LOOPWHILE       reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    ELSE            reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    ENDIF           reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    WEND            reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)
    NEXT            reduce using rule 56 (while_dc -> WHILE seen_While LEFTPAR logicresult seen_LogicResultWhile RIGHTPAR statements_dc seen_WhileEnd WEND .)


state 267

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc . seen_Next NEXT
    (67) seen_Next -> .

    NEXT            reduce using rule 67 (seen_Next -> .)

    seen_Next                      shift and go to state 275

state 268

    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 276

state 269

    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . EQUALS generalexpression

    EQUALS          shift and go to state 277


state 270

    (78) resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .

    ID              reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    INPUT           reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    PRINTLN         reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    PRINT           reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    IF              reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    WHILE           reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    DO              reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    FOR             reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    CALL            reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    RETURN          reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    END             reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    LOOPWHILE       reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    ELSE            reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    ENDIF           reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    WEND            reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)
    NEXT            reduce using rule 78 (resize_dc -> ID DOT RESIZE LEFTPAR arithmeticexpression COMMA arithmeticexpression COMMA arithmeticexpression RIGHTPAR .)


state 271

    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 278

state 272

    (38) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .

    ID              reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    INPUT           reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINTLN         reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINT           reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    IF              reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WHILE           reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    DO              reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    FOR             reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    CALL            reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    RETURN          reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    END             reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    LOOPWHILE       reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ELSE            reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ENDIF           reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WEND            reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    NEXT            reduce using rule 38 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)


state 273

    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 279

state 274

    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET . arithmeticexpression RIGHTBRACKET
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 280

state 275

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next . NEXT

    NEXT            shift and go to state 281


state 276

    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 282
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 277

    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS . generalexpression
    (85) generalexpression -> . arithmeticexpression
    (86) generalexpression -> . STRING
    (87) arithmeticexpression -> . arithmeticexpression PLUS arithmeticexpression
    (88) arithmeticexpression -> . arithmeticexpression MINUS arithmeticexpression
    (89) arithmeticexpression -> . arithmeticexpression MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> . arithmeticexpression DIVIDE arithmeticexpression
    (91) arithmeticexpression -> . arithmeticexpression MODULO arithmeticexpression
    (92) arithmeticexpression -> . ID
    (93) arithmeticexpression -> . LEFTPAR arithmeticexpression RIGHTPAR
    (94) arithmeticexpression -> . NUMBER
    (95) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (96) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET
    (97) arithmeticexpression -> . ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET

    STRING          shift and go to state 97
    ID              shift and go to state 94
    LEFTPAR         shift and go to state 98
    NUMBER          shift and go to state 99

    arithmeticexpression           shift and go to state 96
    generalexpression              shift and go to state 283

state 278

    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET RIGHTPAR
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 284
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 279

    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 285
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 280

    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression . RIGHTBRACKET
    (87) arithmeticexpression -> arithmeticexpression . PLUS arithmeticexpression
    (88) arithmeticexpression -> arithmeticexpression . MINUS arithmeticexpression
    (89) arithmeticexpression -> arithmeticexpression . MULTIPLY arithmeticexpression
    (90) arithmeticexpression -> arithmeticexpression . DIVIDE arithmeticexpression
    (91) arithmeticexpression -> arithmeticexpression . MODULO arithmeticexpression

    RIGHTBRACKET    shift and go to state 286
    PLUS            shift and go to state 137
    MINUS           shift and go to state 138
    MULTIPLY        shift and go to state 139
    DIVIDE          shift and go to state 140
    MODULO          shift and go to state 141


state 281

    (63) for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .

    ID              reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    INPUT           reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    PRINTLN         reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    PRINT           reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    IF              reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    WHILE           reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    DO              reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    FOR             reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    CALL            reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    RETURN          reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    END             reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    LOOPWHILE       reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    ELSE            reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    ENDIF           reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    WEND            reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)
    NEXT            reduce using rule 63 (for_dc -> FOR seen_ID EQUALS arithmeticexpression seen_AE1 TO arithmeticexpression seen_AE2 statements_dc seen_Next NEXT .)


state 282

    (97) arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .

    PLUS            reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MINUS           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MULTIPLY        reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIVIDE          reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    MODULO          reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ID              reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    INPUT           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINTLN         reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PRINT           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    IF              reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WHILE           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DO              reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    FOR             reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    CALL            reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RETURN          reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    END             reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LOOPWHILE       reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ELSE            reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    ENDIF           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    WEND            reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    NEXT            reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTBRACKET    reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    TO              reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    COMMA           reduce using rule 97 (arithmeticexpression -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)


state 283

    (35) assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .

    ID              reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    INPUT           reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINTLN         reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    PRINT           reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    IF              reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WHILE           reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    DO              reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    FOR             reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    CALL            reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    RETURN          reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    END             reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    LOOPWHILE       reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ELSE            reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    ENDIF           reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    WEND            reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)
    NEXT            reduce using rule 35 (assign_dc -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET EQUALS generalexpression .)


state 284

    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET . RIGHTPAR

    RIGHTPAR        shift and go to state 287


state 285

    (48) printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .

    RIGHTPAR        reduce using rule 48 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    PLUS            reduce using rule 48 (printarithmetic -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)


state 286

    (111) logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .

    SAME            reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    DIFFERENT       reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATERTHAN     reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSTHAN        reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    GREATEREQUAL    reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    LESSEQUAL       reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    RIGHTPAR        reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    AND             reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)
    OR              reduce using rule 111 (logicOption -> ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET .)


state 287

    (39) input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .

    ID              reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    INPUT           reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINTLN         reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    PRINT           reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    IF              reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WHILE           reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    DO              reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    FOR             reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    CALL            reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    RETURN          reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    END             reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    LOOPWHILE       reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ELSE            reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    ENDIF           reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    WEND            reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)
    NEXT            reduce using rule 39 (input_dc -> INPUT LEFTPAR ID LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET LEFTBRACKET arithmeticexpression RIGHTBRACKET RIGHTPAR .)

